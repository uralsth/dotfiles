* Values
** Lisp Types
*** Strings
*** Numbers
*** Symbols
*** Cons cells
*** Arrays and Vectors
*** ... and more
** Emacs Tyoes
*** Buffers
*** Windows
*** Frames
*** Threads
*** keymaps
*** ....
#+begin_src emacs-lisp
(switch-to-buffer (other-buffer))
#+end_src
** Form and Evaluation 
*** any lisp object that can be evaluated
*** Evaluation works differently for:
**** List
**** Symbol
***** type of object but it's not self evaluating
***** symbol character - + = * ...
***** can also contain alphanumeric characters
***** example:
****** bui-keyword ->symbol
****** gunner/some-name - gunner is namespce
****** *asdasd* - indicates a global variable
****** string= command check if something is equal to someting else
**** All other object types
**** self evaluating
#+begin_src emacs-lisp
;; primitives are usually self evaluating
42

"Hello"

[1 2 (+ 1 2)]

;;symbols are not evaluating!
;;symbols is bound to a value inside a lisp environment
buffer-file-name

;; list : evaluates a function!
(+ 300 11)

;; some representation can't be evaluatiing
;; 
#<buffer Emacs-01.org>

#+end_src
*** when symbol is evaluated, it returns the variable valye associated with that binding
*** function names can't be  evaluated
* Infix vs Prefix
** lisp use prefix notation
* Some exercise
#+begin_src emacs-lisp
(concat "Hello " "Emacs!")

;; simple list
'(1 2 3)

;;Another way to create a list
(list 1 2 3)

;; get the second
(car (cdr '(1 2 3)))

;; A vector
[1 2 3]

;; 
(stringp 40)

;; type-of
(type-of (list 1 2 3))
#+end_src
